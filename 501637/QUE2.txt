CREATE OR REPLACE PACKAGE CUST_BOOKING AS
	PROCEDURE CALL_GET_COUNT(P_CUST_ID BOOKING.CUST_ID%TYPE);
END;
/

CREATE OR REPLACE PACKAGE BODY CUST_BOOKING AS
PROCEDURE CALL_GET_COUNT(P_CUST_ID BOOKING.CUST_ID%TYPE) IS
	V_CNT NUMBER(1);
	E_INVALID_CUST_ID EXCEPTION ;
	CURSOR BOOKING_CUR IS
	SELECT * FROM BOOKING WHERE CUST_ID = P_CUST_ID;

BEGIN
	SELECT COUNT(1) INTO V_CNT FROM CUSTOMER WHERE CUST_ID = P_CUST_ID;
	IF V_CNT = 0 THEN
		RAISE E_INVALID_CUST_ID;
	ELSE
		DBMS_OUTPUT.PUT_LINE(LPAD('-',80,'-'));
		DBMS_OUTPUT.PUT(RPAD('BOOKING_ID',15,' '));
		DBMS_OUTPUT.PUT(RPAD('VEHICLE_ID',15,' '));
		DBMS_OUTPUT.PUT(RPAD('TRAINING_DATE',15,' '));
		DBMS_OUTPUT.PUT_LINE(RPAD('DURATION',15,' '));
		DBMS_OUTPUT.PUT_LINE(LPAD('-',80,'-'));
		FOR V_ROW_BOOKING IN BOOKING_CUR LOOP
			DBMS_OUTPUT.PUT(RPAD(V_ROW_BOOKING.BOOKING_ID,15,' '));
			DBMS_OUTPUT.PUT(RPAD(V_ROW_BOOKING.VEHICLE_ID,15,' '));
			DBMS_OUTPUT.PUT(RPAD(V_ROW_BOOKING.TRAINING_DATE_TIME,15,' '));
			DBMS_OUTPUT.PUT_LINE(RPAD(V_ROW_BOOKING.DURATION,15,' '));
		END LOOP;
		
	END IF;

EXCEPTION
	WHEN E_INVALID_CUST_ID THEN
	DBMS_OUTPUT.PUT_LINE('INVALID CUSTOMER. MAKE A VALID ENTRY!');
END CALL_GET_COUNT;

END CUST_BOOKING;
/

			